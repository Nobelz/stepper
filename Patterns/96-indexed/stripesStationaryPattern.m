%Pattern Template Program
%Created 20100706, JWA (japtekar@gmail.com)
%--------------------------------------------------------------------------
%   This program creates one structure ('pattern').  The relevant components of
%   this structure are as follows:
%       pattern  -  the parent structure
%               .x_num  -  xpos limits
%                           by convention, xpos relates to translation and
%                           rotations of a static pattern
%               .y_num  -  ypos limits
%                           by convention, ypos relates to non-length
%                           conserving transformations
%               .x_panels  -  number of panels in x direction
%               .y_panels  -  number of panels in y directions
%               .num_panels  -  number of panels in array
%                               (.x_panels*.ypanels)
%               .panel_size  -  '0' gives default 8x8, '1' allows user specific
%               .gs_val  -  gray scale value
%                           0
%                           1
%                           2
%                           3
%               .Pats  -  data for the panels...a 4D array where
%                           (x_panels*x_size,y_panels*y_size,xpos,ypos)
%               .Panel_map  -  a 2x2 array specifying the location of the
%                              named panels indexed from '1'
%               .BitMapIndex  -  output generated by executing
%                                'process_panel_map(pattern);'
%               .data  -  output generated by executing
%                         'make_pattern_vector(pattern);'

%function [pattern] = stepper_pattern_for_nobel(n_barwidth);
%JLF June 2023: this doesn't need to be a function

tic
%GENERAL PARAMETERS
    pattern.x_num       = 1;
    pattern.y_num       = 96;
    pattern.x_panels    = 2; %updated JLF 6/29/23 for shorter arena
    pattern.y_panels    = 12;
    pattern.num_panels  = pattern.x_panels*pattern.y_panels;    %   NOTE: this is a standard size for the 12*4 arena.
    pattern.panel_size  = 0;                                    %   NOTE: 0 will give default 8x8 panels
    pattern.gs_val      = 1;
    pattern.x_size      = 8;
    pattern.y_size      = 8;
%MAKE 'pattern.Pats'
%     pattern.Pats = zeros(pattern.x_panels*pattern.x_size,pattern.y_panels*pattern.y_size,...
%         pattern.x_num,pattern.y_num);
    pattern.Pats = zeros(2, 96, pattern.x_num,pattern.y_num);
%--------------------------------------------------------------------------
%SPECIFIC PARAMETERS
    pattern.name = 'nobelStripesStationary';
    pattern.params.barwidth = 0;%No bar, JLF 6/2023
    pattern.params.barstart = 1; %position of bar
    n_barstart=0;
    pattern.name=strcat(pattern.name,...
        '-', num2str(pattern.params.barwidth));

    pattern.params.barend = pattern.params.barstart+pattern.params.barwidth;

% Initialize Pattern
pattern.Pats(:,:,1,1)=round(rand(size(pattern.Pats(:,:,1,1))));
pattern.Pats(:,:,1,1) = fsdofilt(pattern.Pats(:,:,1,1),0.20,0.45); % "Straightens" to bars
pattern_back=pattern.Pats(:,:,1,1);
% pattern.Pats = test;

% for i=1:96
    for j=1:96
        pattern.Pats(:, :, 1, j) = pattern.Pats(:, :, 1, 1);
    end
% end

pattern.row_compression=1;

%Set Panel Map
pattern.Panel_map = flipud(reshape(1:pattern.num_panels,pattern.x_panels,pattern.y_panels));

%Processing Code
pattern.BitMapIndex = process_panel_map(pattern);

pattern.data = Make_pattern_vector(pattern);

%Save Pattern w/in 'Patterns'
pattern.filename=['C:\Users\FoxLab\Desktop\Pattern-' pattern.name '_Jan2024'];
save(pattern.filename, 'pattern');

%Clean-up Workspace
clear binback binbar i testback testbar;
toc

% %% Run
% h = figure;
% %Visualize pattern, JLF 6/2023
% for i =1:size(pattern.Pats,4)
%     pic = squeeze(pattern.Pats(:,:,1,i));
%     imagesc(pic)
%     xticks(1: 96)
%     grid on
%     pause(1)
% end
